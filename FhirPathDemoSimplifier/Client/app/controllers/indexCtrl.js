// Generated by IcedCoffeeScript 108.0.9
(function() {
  app.controller('IndexCtrl', function($scope, $firebaseObject, fhirServer, resourceIdentityModel) {
    var Save, fpath, resetValues;
    fpath = null;
    require(['Client/app/vendor/fhirpath.js/bundle.js'], function(fhirpath) {
      return fpath = fhirpath;
    });
    $scope.resourceIdentityModel = resourceIdentityModel;
    $scope.isDemoMode = resourceIdentityModel === null;
    $scope.goBack = function() {
      return window.location = $scope.resourceIdentityModel.CallbackUrl;
    };
    $scope.goToDemoMode = function() {
      var fbRef;
      resetValues();
      fbRef = new Firebase("https://fhirpath.firebaseio.com/");
      $scope.examples = $firebaseObject(fbRef);
      $scope.path = 'Patient.name.given |  Patient.name.given';
      $scope.resource = '{"resourceType": "Patient", "name": [{"given": ["John"]}]}';
      return $scope.isDemoMode = true;
    };
    $scope.goToResource = function() {
      var server;
      resetValues();
      server = fhirServer(resourceIdentityModel.BaseUrl);
      server.read({
        id: resourceIdentityModel.ResourceId,
        resourceType: resourceIdentityModel.ResourceType,
        success: function(data) {
          $scope.resource = JSON.stringify(data, null, 4);
          return $scope.$apply('doMapping()');
        },
        error: function(error) {
          return console.log(error);
        }
      });
      return $scope.isDemoMode = false;
    };
    $scope.saveExample = function() {
      $scope.saving = "Saving...";
      return Save({
        path: $scope.path,
        name: $scope.exampleName,
        resource: $scope.resource
      }, function() {
        return $scope.saving = null;
      });
    };
    $scope.update = function() {
      var e, resource, result;
      try {
        resource = JSON.parse($scope.resource);
        $scope.parseError = null;
      } catch (_error) {
        e = _error;
        $scope.parseError = e.toString();
        return;
      }
      try {
        result = fpath.evaluate(resource, $scope.path);
        $scope.result = JSON.stringify(result, null, "  ");
        $scope.errors = null;
        return $scope.error = null;
      } catch (_error) {
        e = _error;
        if (e.errors) {
          $scope.errors = e.errors;
          return console.log("ERROR", e.errors);
        } else {
          return $scope.error = e.toString();
        }
      }
    };
    $scope.selectExample = function(ex) {
      $scope.resource = ex.resource;
      $scope.path = ex.path;
      $scope.exampleName = ex.name;
      return $scope.update();
    };
    $scope.codemirrorConfig = {
      lineWrapping: false,
      lineNumbers: true,
      mode: 'javascript',
      extraKeys: window.CodeMirror.normalizeKeyMap({
        "Ctrl-Space": function() {
          return $scope.$apply('doMapping()');
        },
        Tab: function(cm) {
          return cm.replaceSelection("  ");
        }
      }),
      viewportMargin: Infinity
    };
    Save = function(data, cb) {
      var obj, ref;
      if (!(data || data.name)) {
        return;
      }
      ref = new Firebase("https://fhirpath.firebaseio.com/" + data.name);
      obj = $firebaseObject(ref);
      return obj.$loaded().then(function() {
        console.log("loaded", obj);
        obj.path = data.path;
        obj.name = data.name;
        obj.resource = data.resource;
        return obj.$save().then(function() {
          return cb();
        });
      });
    };
    resetValues = function() {
      $scope.path = "";
      $scope.resource = "";
      $scope.result = "";
      return $scope.errors = null;
    };
    resetValues();
    if ($scope.isDemoMode) {
      return $scope.goToDemoMode();
    } else {
      return $scope.goToResource();
    }
  });

}).call(this);
